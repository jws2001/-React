{"version":3,"sources":["types/enums.tsx","components/ChessComp.tsx","components/BoardComp.tsx","components/GameStateComp.tsx","components/GameComp.tsx","App.tsx","index.tsx"],"names":["ChessType","GameState","ChessComp","type","onClick","chess","red","className","black","none","BoardComp","props","isGameOver","list","chesses","map","index","key","defaultProps","GameStateComp","content","status","next","gaming","redWin","blackWin","GameComp","state","nextChess","arr","i","push","this","setState","init","getStatus","horMin","Math","floor","verMin","includes","equal","style","textAlign","marginTop","handleChessClick","bind","_","React","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAAYA,EAMAC,E,6EANAD,O,eAAAA,I,aAAAA,I,kBAAAA,M,cAMAC,O,mBAAAA,I,mBAAAA,I,uBAAAA,I,kBAAAA,M,WCCL,SAASC,EAAT,GAA+C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,QAC1BC,EAAQ,KAMZ,OALIF,IAASH,EAAUM,IACnBD,EAAQ,yBAAKE,UAAU,mBAChBJ,IAASH,EAAUQ,QAC1BH,EAAQ,yBAAKE,UAAU,sBAGvB,yBAAKA,UAAU,QAAQH,QAAS,WACxBD,IAASH,EAAUS,MAAQL,GAC3BA,MAGHC,G,UCXPK,EAA8B,SAAUC,GAC1C,IAAMC,EAAaD,EAAMC,WAEnBC,EAAOF,EAAMG,QAAQC,KAAI,SAACZ,EAAMa,GAAP,OAAiB,kBAAC,EAAD,CAC5CC,IAAKD,EACLb,KAAMA,EACNC,QAAS,WACDO,EAAMP,UAAYQ,GAClBD,EAAMP,QAAQY,SAK1B,OACI,yBAAKT,UAAU,SACVM,IAKbH,EAAUQ,aAAe,CACrBN,YAAY,G,MCvBT,SAASO,EAAT,GAAkD,IACjDC,EADwBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,KAiBpC,OAbQF,EAFJC,IAAWpB,EAAUsB,OACjBD,IAAStB,EAAUM,IACT,yBAAKC,UAAU,YAAf,4BAEA,yBAAKA,UAAU,cAAf,4BAGVc,IAAWpB,EAAUuB,OACX,yBAAKjB,UAAU,WAAf,4BACHc,IAAWpB,EAAUwB,SAClB,yBAAKlB,UAAU,aAAf,4BAEA,yBAAKA,UAAU,aAAf,gBAId,yBAAKA,UAAU,UACVa,GCdN,IAAMM,EAAb,4MAEIC,MAAgB,CACZb,QAAS,GACTb,UAAWA,EAAUsB,OACrBK,UAAW5B,EAAUQ,OAL7B,qDAaQ,IADA,IAAMqB,EAAmB,GAChBC,EAAI,EAAGA,EAAI,EAAGA,IACnBD,EAAIE,KAAK/B,EAAUS,MAEvBuB,KAAKC,SAAS,CACVnB,QAASe,EACT5B,UAAWA,EAAUsB,OACrBK,UAAW5B,EAAUQ,UAnBjC,0CAwBQwB,KAAKE,SAxBb,uCA+BqBlB,GACb,IAAMF,EAAoB,YAAOkB,KAAKL,MAAMb,SAC5CA,EAAQE,GAASgB,KAAKL,MAAMC,UACxBI,KAAKL,MAAMC,YAAc5B,EAAUQ,MACnCwB,KAAKL,MAAMC,UAAY5B,EAAUM,IAEjC0B,KAAKL,MAAMC,UAAY5B,EAAUQ,MAErCwB,KAAKC,SAAS,CACVnB,UACAb,UAAW+B,KAAKG,UAAUrB,EAASE,OAzC/C,gCA6CcF,EAAsBE,GAE5B,IAAMoB,EAAiC,EAAxBC,KAAKC,MAAMtB,EAAQ,GAC5BuB,EAASvB,EAAQ,EACvB,OAAKF,EAAQsB,KAAYtB,EAAQsB,EAAS,IAAMtB,EAAQsB,KAAYtB,EAAQsB,EAAS,IAEhFtB,EAAQyB,KAAYzB,EAAQyB,EAAS,IAAMzB,EAAQyB,KAAYzB,EAAQyB,EAAS,IAEhFzB,EAAQ,KAAOA,EAAQ,IAAMA,EAAQ,KAAOA,EAAQ,IAAMA,EAAQ,KAAOd,EAAUS,MAEnFK,EAAQ,KAAOA,EAAQ,IAAMA,EAAQ,KAAOA,EAAQ,IAAMA,EAAQ,KAAOd,EAAUS,KAChFK,EAAQE,KAAWhB,EAAUM,IACtBL,EAAUuB,OAEVvB,EAAUwB,SAIpBX,EAAQ0B,SAASxC,EAAUS,MAGzBR,EAAUsB,OAFNtB,EAAUwC,QAhE7B,+BAqEc,IAAD,OACL,OACI,yBAAKlC,UAAU,OAAOmC,MAAO,CAAEC,UAAW,SAAUC,UAAU,UAC1D,8DACA,kBAACzB,EAAD,CAAeE,OAAQW,KAAKL,MAAM1B,UAAWqB,KAAMU,KAAKL,MAAMC,YAC9D,kBAAC,EAAD,CACId,QAASkB,KAAKL,MAAMb,QACpBF,WAAYoB,KAAKL,MAAM1B,YAAcA,EAAUsB,OAC/CnB,QAAS4B,KAAKa,iBAAiBC,KAAKd,QAExC,4BAAQ5B,QAAS,SAAA2C,GACb,EAAKb,SADT,6CA/EhB,GAA8Bc,IAAMC,WCLfC,E,uKAIjB,OACE,6BACE,kBAAC,EAAD,W,GANyBF,IAAMC,WCFvCE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.6e04afff.chunk.js","sourcesContent":["export enum ChessType {\r\n    none,\r\n    red,\r\n    black\r\n}\r\n\r\nexport enum GameState {\r\n    gaming,//正在游戏中\r\n    redWin,//红方胜利\r\n    blackWin,//黑房胜利\r\n    equal//平局\r\n}","import React from \"react\";\r\nimport { ChessType } from \"../types/enums\";\r\nimport './ChessComp.css'\r\ninterface IProps {\r\n    type: ChessType\r\n    onClick?: () => void\r\n}\r\nexport function ChessComp({ type, onClick }: IProps) {\r\n    let chess = null;\r\n    if (type === ChessType.red) {\r\n        chess = <div className=\"red chess-item\"></div>\r\n    } else if (type === ChessType.black) {\r\n        chess = <div className=\"black chess-item\"></div>\r\n    }\r\n    return (\r\n        <div className=\"chess\" onClick={() => {\r\n            if (type === ChessType.none && onClick) {\r\n                onClick()\r\n            }\r\n        }}>\r\n            {chess}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { ChessType } from \"../types/enums\";\r\nimport { ChessComp } from \"./ChessComp\";\r\nimport './BoardComp.css'\r\ninterface IPorps {\r\n    chesses: ChessType[]\r\n    isGameOver?: boolean\r\n    onClick?: (index: number) => void\r\n}\r\nconst BoardComp: React.FC<IPorps> = function (props: IPorps) {\r\n    const isGameOver = props.isGameOver!\r\n\r\n    const list = props.chesses.map((type, index) => <ChessComp\r\n        key={index}\r\n        type={type}\r\n        onClick={() => {\r\n            if (props.onClick && !isGameOver) {\r\n                props.onClick(index)\r\n            }\r\n\r\n        }}\r\n    />)\r\n    return (\r\n        <div className=\"board\">\r\n            {list}\r\n        </div>\r\n    )\r\n}\r\n\r\nBoardComp.defaultProps = {\r\n    isGameOver: false\r\n}\r\n\r\nexport { BoardComp }","import React from \"react\";\r\nimport { ChessType, GameState } from \"../types/enums\";\r\nimport './GameStatusComp.css'\r\ninterface IProps {\r\n    status: GameState\r\n    next: ChessType.red | ChessType.black\r\n}\r\nexport function GameStateComp({ status, next }: IProps) {\r\n    let content: JSX.Element;\r\n    if (status === GameState.gaming) {\r\n        if (next === ChessType.red) {\r\n            content = <div className=\"next red\">红方落子</div>\r\n        } else {\r\n            content = <div className=\"next black\">黑方落子</div>\r\n        }\r\n    } else {\r\n        if (status === GameState.redWin) {\r\n            content = <div className=\"win red\">红方胜利</div>\r\n        } else if (status === GameState.blackWin) {\r\n            content = <div className=\"win black\">黑方胜利</div>\r\n        } else {\r\n            content = <div className=\"win equal\">平局</div>\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"status\">\r\n            {content}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { ChessType, GameState } from \"../types/enums\";\r\nimport { BoardComp } from \"./BoardComp\";\r\nimport { GameStateComp } from \"./GameStateComp\";\r\n\r\n\r\ninterface IState {\r\n    chesses: ChessType[]\r\n    GameState: GameState\r\n    nextChess: ChessType.red | ChessType.black\r\n}\r\n\r\nexport class GameComp extends React.Component<{}, IState> {\r\n\r\n    state: IState = {\r\n        chesses: [],\r\n        GameState: GameState.gaming,\r\n        nextChess: ChessType.black\r\n    }\r\n\r\n    /**\r\n     * 初始化数据\r\n     */\r\n    private init() {\r\n        const arr: ChessType[] = [];\r\n        for (let i = 0; i < 9; i++) {\r\n            arr.push(ChessType.none)\r\n        }\r\n        this.setState({\r\n            chesses: arr,\r\n            GameState: GameState.gaming,\r\n            nextChess: ChessType.black\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.init()\r\n    }\r\n\r\n    /**\r\n     *  处理棋子点击事件\r\n     * @param index\r\n     */\r\n    handleChessClick(index: number) {\r\n        const chesses: ChessType[] = [...this.state.chesses];\r\n        chesses[index] = this.state.nextChess;\r\n        if (this.state.nextChess === ChessType.black) {\r\n            this.state.nextChess = ChessType.red\r\n        } else {\r\n            this.state.nextChess = ChessType.black\r\n        }\r\n        this.setState({\r\n            chesses,\r\n            GameState: this.getStatus(chesses, index)\r\n        })\r\n    }\r\n\r\n    getStatus(chesses: ChessType[], index: number): GameState {\r\n        //1 判断是否有一方胜利\r\n        const horMin = Math.floor(index / 3) * 3;\r\n        const verMin = index % 3;\r\n        if ((chesses[horMin] === chesses[horMin + 1] && chesses[horMin] === chesses[horMin + 2])\r\n            ||\r\n            (chesses[verMin] === chesses[verMin + 3] && chesses[verMin] === chesses[verMin + 6])\r\n            ||\r\n            (chesses[0] === chesses[4] && chesses[0] === chesses[8] && chesses[0] !== ChessType.none)\r\n            ||\r\n            (chesses[2] === chesses[4] && chesses[2] === chesses[6] && chesses[2] !== ChessType.none)) {\r\n            if (chesses[index] === ChessType.red) {\r\n                return GameState.redWin\r\n            } else {\r\n                return GameState.blackWin\r\n            }\r\n        }\r\n        //判断是否平局\r\n        if (!chesses.includes(ChessType.none)) {\r\n            return GameState.equal\r\n        }\r\n        return GameState.gaming\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"game\" style={{ textAlign: 'center', marginTop:\"150px\" }}>\r\n                <h1>井字棋游戏</h1>\r\n                <GameStateComp status={this.state.GameState} next={this.state.nextChess} />\r\n                <BoardComp\r\n                    chesses={this.state.chesses}\r\n                    isGameOver={this.state.GameState !== GameState.gaming}\r\n                    onClick={this.handleChessClick.bind(this)}\r\n                />\r\n                <button onClick={_ => {\r\n                    this.init()\r\n                }}>重新开始游戏</button>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport { ChessType } from './types/enums';\nimport { BoardComp } from './components/BoardComp'\nimport { GameComp } from './components/GameComp';\n\n\n\nexport default class App extends React.Component {\n\n\n  render() {\n    return (\n      <div>\n        <GameComp />\n      </div>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}